// Code generated by moshi-kotlin-codegen. Do not edit.
package com.renovavision.deezerplayer.data.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TopArtistTracks_ArtistTrackJsonAdapter(
  moshi: Moshi
) : JsonAdapter<TopArtistTracks.ArtistTrack>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "readable", "title",
      "title_short", "title_version", "link", "duration", "rank", "explicit_lyrics",
      "explicit_content_lyrics", "explicit_content_cover", "preview", "contributors", "artist",
      "album", "type")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "readable")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "title_short")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "duration")

  private val nullableListOfContributorAdapter: JsonAdapter<List<Contributor>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Contributor::class.java),
      emptySet(), "contributors")

  private val mainArtistAdapter: JsonAdapter<MainArtist> = moshi.adapter(MainArtist::class.java,
      emptySet(), "artist")

  private val albumAdapter: JsonAdapter<Album> = moshi.adapter(Album::class.java, emptySet(),
      "album")

  override fun toString(): String = buildString(49) {
      append("GeneratedJsonAdapter(").append("TopArtistTracks.ArtistTrack").append(')') }

  override fun fromJson(reader: JsonReader): TopArtistTracks.ArtistTrack {
    var id: Int? = null
    var readable: Boolean? = null
    var title: String? = null
    var title_short: String? = null
    var title_version: String? = null
    var link: String? = null
    var duration: Int? = null
    var rank: Int? = null
    var explicit_lyrics: Boolean? = null
    var explicit_content_lyrics: Int? = null
    var explicit_content_cover: Int? = null
    var preview: String? = null
    var contributors: List<Contributor>? = null
    var artist: MainArtist? = null
    var album: Album? = null
    var type: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> readable = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("readable",
            "readable", reader)
        2 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        3 -> title_short = nullableStringAdapter.fromJson(reader)
        4 -> title_version = nullableStringAdapter.fromJson(reader)
        5 -> link = nullableStringAdapter.fromJson(reader)
        6 -> duration = nullableIntAdapter.fromJson(reader)
        7 -> rank = nullableIntAdapter.fromJson(reader)
        8 -> explicit_lyrics = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("explicit_lyrics", "explicit_lyrics", reader)
        9 -> explicit_content_lyrics = nullableIntAdapter.fromJson(reader)
        10 -> explicit_content_cover = nullableIntAdapter.fromJson(reader)
        11 -> preview = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("preview",
            "preview", reader)
        12 -> contributors = nullableListOfContributorAdapter.fromJson(reader)
        13 -> artist = mainArtistAdapter.fromJson(reader) ?: throw Util.unexpectedNull("artist",
            "artist", reader)
        14 -> album = albumAdapter.fromJson(reader) ?: throw Util.unexpectedNull("album", "album",
            reader)
        15 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return TopArtistTracks.ArtistTrack(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        readable = readable ?: throw Util.missingProperty("readable", "readable", reader),
        title = title ?: throw Util.missingProperty("title", "title", reader),
        title_short = title_short,
        title_version = title_version,
        link = link,
        duration = duration,
        rank = rank,
        explicit_lyrics = explicit_lyrics ?: throw Util.missingProperty("explicit_lyrics",
            "explicit_lyrics", reader),
        explicit_content_lyrics = explicit_content_lyrics,
        explicit_content_cover = explicit_content_cover,
        preview = preview ?: throw Util.missingProperty("preview", "preview", reader),
        contributors = contributors,
        artist = artist ?: throw Util.missingProperty("artist", "artist", reader),
        album = album ?: throw Util.missingProperty("album", "album", reader),
        type = type ?: throw Util.missingProperty("type", "type", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: TopArtistTracks.ArtistTrack?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("readable")
    booleanAdapter.toJson(writer, value.readable)
    writer.name("title")
    stringAdapter.toJson(writer, value.title)
    writer.name("title_short")
    nullableStringAdapter.toJson(writer, value.title_short)
    writer.name("title_version")
    nullableStringAdapter.toJson(writer, value.title_version)
    writer.name("link")
    nullableStringAdapter.toJson(writer, value.link)
    writer.name("duration")
    nullableIntAdapter.toJson(writer, value.duration)
    writer.name("rank")
    nullableIntAdapter.toJson(writer, value.rank)
    writer.name("explicit_lyrics")
    booleanAdapter.toJson(writer, value.explicit_lyrics)
    writer.name("explicit_content_lyrics")
    nullableIntAdapter.toJson(writer, value.explicit_content_lyrics)
    writer.name("explicit_content_cover")
    nullableIntAdapter.toJson(writer, value.explicit_content_cover)
    writer.name("preview")
    stringAdapter.toJson(writer, value.preview)
    writer.name("contributors")
    nullableListOfContributorAdapter.toJson(writer, value.contributors)
    writer.name("artist")
    mainArtistAdapter.toJson(writer, value.artist)
    writer.name("album")
    albumAdapter.toJson(writer, value.album)
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.endObject()
  }
}
