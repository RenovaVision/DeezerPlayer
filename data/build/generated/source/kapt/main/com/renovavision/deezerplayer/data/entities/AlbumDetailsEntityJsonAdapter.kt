// Code generated by moshi-kotlin-codegen. Do not edit.
package com.renovavision.deezerplayer.data.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class AlbumDetailsEntityJsonAdapter(
  moshi: Moshi
) : JsonAdapter<AlbumDetailsEntity>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "title", "upc", "link",
      "share", "cover", "cover_small", "cover_medium", "cover_big", "cover_xl", "genre_id",
      "genres", "label", "nb_tracks", "duration", "fans", "rating", "release_date", "record_type",
      "available", "tracklist", "explicit_lyrics", "explicit_content_lyrics",
      "explicit_content_cover", "contributors", "artist", "type", "tracks")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "upc")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "link")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "genre_id")

  private val genresEntityAdapter: JsonAdapter<AlbumDetailsEntity.GenresEntity> =
      moshi.adapter(AlbumDetailsEntity.GenresEntity::class.java, emptySet(), "genres")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "available")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "explicit_lyrics")

  private val nullableListOfContributorEntityAdapter: JsonAdapter<List<ContributorEntity>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, ContributorEntity::class.java),
      emptySet(), "contributors")

  private val authorEntityAdapter: JsonAdapter<AlbumDetailsEntity.AuthorEntity> =
      moshi.adapter(AlbumDetailsEntity.AuthorEntity::class.java, emptySet(), "artist")

  private val tracksEntityAdapter: JsonAdapter<AlbumDetailsEntity.TracksEntity> =
      moshi.adapter(AlbumDetailsEntity.TracksEntity::class.java, emptySet(), "tracks")

  override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("AlbumDetailsEntity").append(')') }

  override fun fromJson(reader: JsonReader): AlbumDetailsEntity {
    var id: Int? = null
    var title: String? = null
    var upc: Long? = null
    var link: String? = null
    var share: String? = null
    var cover: String? = null
    var cover_small: String? = null
    var cover_medium: String? = null
    var cover_big: String? = null
    var cover_xl: String? = null
    var genre_id: Int? = null
    var genres: AlbumDetailsEntity.GenresEntity? = null
    var label: String? = null
    var nb_tracks: Int? = null
    var duration: Int? = null
    var fans: Int? = null
    var rating: Int? = null
    var release_date: String? = null
    var record_type: String? = null
    var available: Boolean? = null
    var tracklist: String? = null
    var explicit_lyrics: Boolean? = null
    var explicit_content_lyrics: Int? = null
    var explicit_content_cover: Int? = null
    var contributors: List<ContributorEntity>? = null
    var artist: AlbumDetailsEntity.AuthorEntity? = null
    var type: String? = null
    var tracks: AlbumDetailsEntity.TracksEntity? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        2 -> upc = nullableLongAdapter.fromJson(reader)
        3 -> link = nullableStringAdapter.fromJson(reader)
        4 -> share = nullableStringAdapter.fromJson(reader)
        5 -> cover = nullableStringAdapter.fromJson(reader)
        6 -> cover_small = nullableStringAdapter.fromJson(reader)
        7 -> cover_medium = nullableStringAdapter.fromJson(reader)
        8 -> cover_big = nullableStringAdapter.fromJson(reader)
        9 -> cover_xl = nullableStringAdapter.fromJson(reader)
        10 -> genre_id = nullableIntAdapter.fromJson(reader)
        11 -> genres = genresEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("genres",
            "genres", reader)
        12 -> label = nullableStringAdapter.fromJson(reader)
        13 -> nb_tracks = nullableIntAdapter.fromJson(reader)
        14 -> duration = nullableIntAdapter.fromJson(reader)
        15 -> fans = nullableIntAdapter.fromJson(reader)
        16 -> rating = nullableIntAdapter.fromJson(reader)
        17 -> release_date = nullableStringAdapter.fromJson(reader)
        18 -> record_type = nullableStringAdapter.fromJson(reader)
        19 -> available = nullableBooleanAdapter.fromJson(reader)
        20 -> tracklist = nullableStringAdapter.fromJson(reader)
        21 -> explicit_lyrics = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("explicit_lyrics", "explicit_lyrics", reader)
        22 -> explicit_content_lyrics = nullableIntAdapter.fromJson(reader)
        23 -> explicit_content_cover = nullableIntAdapter.fromJson(reader)
        24 -> contributors = nullableListOfContributorEntityAdapter.fromJson(reader)
        25 -> artist = authorEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("artist",
            "artist", reader)
        26 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        27 -> tracks = tracksEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("tracks",
            "tracks", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return AlbumDetailsEntity(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        title = title ?: throw Util.missingProperty("title", "title", reader),
        upc = upc,
        link = link,
        share = share,
        cover = cover,
        cover_small = cover_small,
        cover_medium = cover_medium,
        cover_big = cover_big,
        cover_xl = cover_xl,
        genre_id = genre_id,
        genres = genres ?: throw Util.missingProperty("genres", "genres", reader),
        label = label,
        nb_tracks = nb_tracks,
        duration = duration,
        fans = fans,
        rating = rating,
        release_date = release_date,
        record_type = record_type,
        available = available,
        tracklist = tracklist,
        explicit_lyrics = explicit_lyrics ?: throw Util.missingProperty("explicit_lyrics",
            "explicit_lyrics", reader),
        explicit_content_lyrics = explicit_content_lyrics,
        explicit_content_cover = explicit_content_cover,
        contributors = contributors,
        artist = artist ?: throw Util.missingProperty("artist", "artist", reader),
        type = type ?: throw Util.missingProperty("type", "type", reader),
        tracks = tracks ?: throw Util.missingProperty("tracks", "tracks", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: AlbumDetailsEntity?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("title")
    stringAdapter.toJson(writer, value.title)
    writer.name("upc")
    nullableLongAdapter.toJson(writer, value.upc)
    writer.name("link")
    nullableStringAdapter.toJson(writer, value.link)
    writer.name("share")
    nullableStringAdapter.toJson(writer, value.share)
    writer.name("cover")
    nullableStringAdapter.toJson(writer, value.cover)
    writer.name("cover_small")
    nullableStringAdapter.toJson(writer, value.cover_small)
    writer.name("cover_medium")
    nullableStringAdapter.toJson(writer, value.cover_medium)
    writer.name("cover_big")
    nullableStringAdapter.toJson(writer, value.cover_big)
    writer.name("cover_xl")
    nullableStringAdapter.toJson(writer, value.cover_xl)
    writer.name("genre_id")
    nullableIntAdapter.toJson(writer, value.genre_id)
    writer.name("genres")
    genresEntityAdapter.toJson(writer, value.genres)
    writer.name("label")
    nullableStringAdapter.toJson(writer, value.label)
    writer.name("nb_tracks")
    nullableIntAdapter.toJson(writer, value.nb_tracks)
    writer.name("duration")
    nullableIntAdapter.toJson(writer, value.duration)
    writer.name("fans")
    nullableIntAdapter.toJson(writer, value.fans)
    writer.name("rating")
    nullableIntAdapter.toJson(writer, value.rating)
    writer.name("release_date")
    nullableStringAdapter.toJson(writer, value.release_date)
    writer.name("record_type")
    nullableStringAdapter.toJson(writer, value.record_type)
    writer.name("available")
    nullableBooleanAdapter.toJson(writer, value.available)
    writer.name("tracklist")
    nullableStringAdapter.toJson(writer, value.tracklist)
    writer.name("explicit_lyrics")
    booleanAdapter.toJson(writer, value.explicit_lyrics)
    writer.name("explicit_content_lyrics")
    nullableIntAdapter.toJson(writer, value.explicit_content_lyrics)
    writer.name("explicit_content_cover")
    nullableIntAdapter.toJson(writer, value.explicit_content_cover)
    writer.name("contributors")
    nullableListOfContributorEntityAdapter.toJson(writer, value.contributors)
    writer.name("artist")
    authorEntityAdapter.toJson(writer, value.artist)
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.name("tracks")
    tracksEntityAdapter.toJson(writer, value.tracks)
    writer.endObject()
  }
}
