// Code generated by moshi-kotlin-codegen. Do not edit.
package com.renovavision.deezerplayer.data.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class AlbumInfo_AuthorJsonAdapter(
  moshi: Moshi
) : JsonAdapter<AlbumInfo.Author>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "picture",
      "picture_small", "picture_medium", "picture_big", "picture_xl", "tracklist", "type")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "picture")

  override fun toString(): String = buildString(38) {
      append("GeneratedJsonAdapter(").append("AlbumInfo.Author").append(')') }

  override fun fromJson(reader: JsonReader): AlbumInfo.Author {
    var id: Int? = null
    var name: String? = null
    var picture: String? = null
    var picture_small: String? = null
    var picture_medium: String? = null
    var picture_big: String? = null
    var picture_xl: String? = null
    var tracklist: String? = null
    var type: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> picture = nullableStringAdapter.fromJson(reader)
        3 -> picture_small = nullableStringAdapter.fromJson(reader)
        4 -> picture_medium = nullableStringAdapter.fromJson(reader)
        5 -> picture_big = nullableStringAdapter.fromJson(reader)
        6 -> picture_xl = nullableStringAdapter.fromJson(reader)
        7 -> tracklist = nullableStringAdapter.fromJson(reader)
        8 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return AlbumInfo.Author(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        picture = picture,
        picture_small = picture_small,
        picture_medium = picture_medium,
        picture_big = picture_big,
        picture_xl = picture_xl,
        tracklist = tracklist,
        type = type ?: throw Util.missingProperty("type", "type", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: AlbumInfo.Author?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("picture")
    nullableStringAdapter.toJson(writer, value.picture)
    writer.name("picture_small")
    nullableStringAdapter.toJson(writer, value.picture_small)
    writer.name("picture_medium")
    nullableStringAdapter.toJson(writer, value.picture_medium)
    writer.name("picture_big")
    nullableStringAdapter.toJson(writer, value.picture_big)
    writer.name("picture_xl")
    nullableStringAdapter.toJson(writer, value.picture_xl)
    writer.name("tracklist")
    nullableStringAdapter.toJson(writer, value.tracklist)
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.endObject()
  }
}
