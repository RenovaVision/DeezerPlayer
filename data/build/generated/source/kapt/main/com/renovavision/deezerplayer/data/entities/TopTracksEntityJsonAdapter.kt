// Code generated by moshi-kotlin-codegen. Do not edit.
package com.renovavision.deezerplayer.data.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TopTracksEntityJsonAdapter(
  moshi: Moshi
) : JsonAdapter<TopTracksEntity>() {
  private val options: JsonReader.Options = JsonReader.Options.of("data", "total", "prev", "next")

  private val listOfTrackEntityAdapter: JsonAdapter<List<TopTracksEntity.TrackEntity>> =
      moshi.adapter(Types.newParameterizedType(List::class.java,
      TopTracksEntity.TrackEntity::class.java), emptySet(), "data")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "total")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "prev")

  override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("TopTracksEntity").append(')') }

  override fun fromJson(reader: JsonReader): TopTracksEntity {
    var data: List<TopTracksEntity.TrackEntity>? = null
    var total: Int? = null
    var prev: String? = null
    var next: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> data = listOfTrackEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("data",
            "data", reader)
        1 -> total = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("total", "total",
            reader)
        2 -> prev = nullableStringAdapter.fromJson(reader)
        3 -> next = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return TopTracksEntity(
        data = data ?: throw Util.missingProperty("data", "data", reader),
        total = total ?: throw Util.missingProperty("total", "total", reader),
        prev = prev,
        next = next
    )
  }

  override fun toJson(writer: JsonWriter, value: TopTracksEntity?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("data")
    listOfTrackEntityAdapter.toJson(writer, value.data)
    writer.name("total")
    intAdapter.toJson(writer, value.total)
    writer.name("prev")
    nullableStringAdapter.toJson(writer, value.prev)
    writer.name("next")
    nullableStringAdapter.toJson(writer, value.next)
    writer.endObject()
  }
}
