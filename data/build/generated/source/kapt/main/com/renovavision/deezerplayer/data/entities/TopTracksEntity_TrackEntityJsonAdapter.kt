// Code generated by moshi-kotlin-codegen. Do not edit.
package com.renovavision.deezerplayer.data.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TopTracksEntity_TrackEntityJsonAdapter(
  moshi: Moshi
) : JsonAdapter<TopTracksEntity.TrackEntity>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "readable", "title",
      "title_short", "title_version", "link", "duration", "rank", "explicit_lyrics",
      "explicit_content_lyrics", "explicit_content_cover", "preview", "position", "artist", "album",
      "type")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "readable")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "title_short")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "duration")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "explicit_lyrics")

  private val artistEntityAdapter: JsonAdapter<ArtistEntity> =
      moshi.adapter(ArtistEntity::class.java, emptySet(), "artist")

  private val albumEntityAdapter: JsonAdapter<AlbumEntity> = moshi.adapter(AlbumEntity::class.java,
      emptySet(), "album")

  override fun toString(): String = buildString(49) {
      append("GeneratedJsonAdapter(").append("TopTracksEntity.TrackEntity").append(')') }

  override fun fromJson(reader: JsonReader): TopTracksEntity.TrackEntity {
    var id: Int? = null
    var readable: Boolean? = null
    var title: String? = null
    var title_short: String? = null
    var title_version: String? = null
    var link: String? = null
    var duration: Int? = null
    var rank: Int? = null
    var explicit_lyrics: Boolean? = null
    var explicit_content_lyrics: Int? = null
    var explicit_content_cover: Int? = null
    var preview: String? = null
    var position: Int? = null
    var artist: ArtistEntity? = null
    var album: AlbumEntity? = null
    var type: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> readable = nullableBooleanAdapter.fromJson(reader)
        2 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        3 -> title_short = nullableStringAdapter.fromJson(reader)
        4 -> title_version = nullableStringAdapter.fromJson(reader)
        5 -> link = nullableStringAdapter.fromJson(reader)
        6 -> duration = nullableIntAdapter.fromJson(reader)
        7 -> rank = nullableIntAdapter.fromJson(reader)
        8 -> explicit_lyrics = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("explicit_lyrics", "explicit_lyrics", reader)
        9 -> explicit_content_lyrics = nullableIntAdapter.fromJson(reader)
        10 -> explicit_content_cover = nullableIntAdapter.fromJson(reader)
        11 -> preview = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("preview",
            "preview", reader)
        12 -> position = nullableIntAdapter.fromJson(reader)
        13 -> artist = artistEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("artist",
            "artist", reader)
        14 -> album = albumEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("album",
            "album", reader)
        15 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return TopTracksEntity.TrackEntity(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        readable = readable,
        title = title ?: throw Util.missingProperty("title", "title", reader),
        title_short = title_short,
        title_version = title_version,
        link = link,
        duration = duration,
        rank = rank,
        explicit_lyrics = explicit_lyrics ?: throw Util.missingProperty("explicit_lyrics",
            "explicit_lyrics", reader),
        explicit_content_lyrics = explicit_content_lyrics,
        explicit_content_cover = explicit_content_cover,
        preview = preview ?: throw Util.missingProperty("preview", "preview", reader),
        position = position,
        artist = artist ?: throw Util.missingProperty("artist", "artist", reader),
        album = album ?: throw Util.missingProperty("album", "album", reader),
        type = type ?: throw Util.missingProperty("type", "type", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: TopTracksEntity.TrackEntity?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("readable")
    nullableBooleanAdapter.toJson(writer, value.readable)
    writer.name("title")
    stringAdapter.toJson(writer, value.title)
    writer.name("title_short")
    nullableStringAdapter.toJson(writer, value.title_short)
    writer.name("title_version")
    nullableStringAdapter.toJson(writer, value.title_version)
    writer.name("link")
    nullableStringAdapter.toJson(writer, value.link)
    writer.name("duration")
    nullableIntAdapter.toJson(writer, value.duration)
    writer.name("rank")
    nullableIntAdapter.toJson(writer, value.rank)
    writer.name("explicit_lyrics")
    booleanAdapter.toJson(writer, value.explicit_lyrics)
    writer.name("explicit_content_lyrics")
    nullableIntAdapter.toJson(writer, value.explicit_content_lyrics)
    writer.name("explicit_content_cover")
    nullableIntAdapter.toJson(writer, value.explicit_content_cover)
    writer.name("preview")
    stringAdapter.toJson(writer, value.preview)
    writer.name("position")
    nullableIntAdapter.toJson(writer, value.position)
    writer.name("artist")
    artistEntityAdapter.toJson(writer, value.artist)
    writer.name("album")
    albumEntityAdapter.toJson(writer, value.album)
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.endObject()
  }
}
