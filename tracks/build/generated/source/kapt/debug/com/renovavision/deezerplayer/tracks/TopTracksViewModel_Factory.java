// Generated by Dagger (https://dagger.dev).
package com.renovavision.deezerplayer.tracks;

import com.renovavision.deezerplayer.domain.CoroutineDispatcherProvider;
import com.renovavision.deezerplayer.domain.usecases.GetTopTracks;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TopTracksViewModel_Factory implements Factory<TopTracksViewModel> {
  private final Provider<GetTopTracks> useCaseProvider;

  private final Provider<TrackNavigator> tracksNavigatorProvider;

  private final Provider<CoroutineDispatcherProvider> dispatcherProvider;

  public TopTracksViewModel_Factory(Provider<GetTopTracks> useCaseProvider,
      Provider<TrackNavigator> tracksNavigatorProvider,
      Provider<CoroutineDispatcherProvider> dispatcherProvider) {
    this.useCaseProvider = useCaseProvider;
    this.tracksNavigatorProvider = tracksNavigatorProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public TopTracksViewModel get() {
    return newInstance(useCaseProvider.get(), tracksNavigatorProvider.get(), dispatcherProvider.get());
  }

  public static TopTracksViewModel_Factory create(Provider<GetTopTracks> useCaseProvider,
      Provider<TrackNavigator> tracksNavigatorProvider,
      Provider<CoroutineDispatcherProvider> dispatcherProvider) {
    return new TopTracksViewModel_Factory(useCaseProvider, tracksNavigatorProvider, dispatcherProvider);
  }

  public static TopTracksViewModel newInstance(GetTopTracks useCase, TrackNavigator tracksNavigator,
      CoroutineDispatcherProvider dispatcherProvider) {
    return new TopTracksViewModel(useCase, tracksNavigator, dispatcherProvider);
  }
}
