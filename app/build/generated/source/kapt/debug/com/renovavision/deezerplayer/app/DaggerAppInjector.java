// Generated by Dagger (https://dagger.dev).
package com.renovavision.deezerplayer.app;

import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import androidx.navigation.fragment.NavHostFragment;
import com.renovavision.deezerplayer.activity.MainActivity;
import com.renovavision.deezerplayer.activity.MainActivityModule_MainActivity;
import com.renovavision.deezerplayer.activity.MainActivity_MembersInjector;
import com.renovavision.deezerplayer.activity.NavigationModule_NavAlbumToPlayerFactory;
import com.renovavision.deezerplayer.activity.NavigationModule_NavArtistToAlbumFactory;
import com.renovavision.deezerplayer.activity.NavigationModule_NavArtistToPlayerFactory;
import com.renovavision.deezerplayer.activity.NavigationModule_NavHomeToPlayerFactory;
import com.renovavision.deezerplayer.activity.NavigationModule_NavHostFragmentFactory;
import com.renovavision.deezerplayer.activity.NavigationModule_NavTopArtistsToArtistFactory;
import com.renovavision.deezerplayer.activity.NavigationModule_NavTopTracksToArtistFactory;
import com.renovavision.deezerplayer.album.AlbumFragment;
import com.renovavision.deezerplayer.album.AlbumFragment_Factory;
import com.renovavision.deezerplayer.album.AlbumViewModel;
import com.renovavision.deezerplayer.album.AlbumViewModel_Factory;
import com.renovavision.deezerplayer.artist.presentation.artistinfo.ArtistFragment;
import com.renovavision.deezerplayer.artist.presentation.artistinfo.ArtistFragment_Factory;
import com.renovavision.deezerplayer.artist.presentation.artistinfo.ArtistViewModel;
import com.renovavision.deezerplayer.artist.presentation.artistinfo.ArtistViewModel_Factory;
import com.renovavision.deezerplayer.artist.presentation.topartists.TopArtistsFragment;
import com.renovavision.deezerplayer.artist.presentation.topartists.TopArtistsFragment_Factory;
import com.renovavision.deezerplayer.artist.presentation.topartists.TopArtistsViewModel;
import com.renovavision.deezerplayer.artist.presentation.topartists.TopArtistsViewModel_Factory;
import com.renovavision.deezerplayer.data.NetworkModule_ProvideCocktailApiFactory;
import com.renovavision.deezerplayer.data.NetworkModule_ProvideRetrofit$dataFactory;
import com.renovavision.deezerplayer.data.api.MusicApi;
import com.renovavision.deezerplayer.data.repositories.AlbumRepositoryImpl;
import com.renovavision.deezerplayer.data.repositories.AlbumRepositoryImpl_Factory;
import com.renovavision.deezerplayer.data.repositories.ArtistRepositoryImpl;
import com.renovavision.deezerplayer.data.repositories.ArtistRepositoryImpl_Factory;
import com.renovavision.deezerplayer.data.repositories.HomeRepositoryImpl;
import com.renovavision.deezerplayer.data.repositories.HomeRepositoryImpl_Factory;
import com.renovavision.deezerplayer.domain.entities.ArtistEntity;
import com.renovavision.deezerplayer.domain.entities.PlayerModel;
import com.renovavision.deezerplayer.domain.usecases.GetAlbumInfo;
import com.renovavision.deezerplayer.domain.usecases.GetAlbumInfo_Factory;
import com.renovavision.deezerplayer.domain.usecases.GetArtistModel;
import com.renovavision.deezerplayer.domain.usecases.GetArtistModel_Factory;
import com.renovavision.deezerplayer.domain.usecases.GetHomeModel;
import com.renovavision.deezerplayer.domain.usecases.GetHomeModel_Factory;
import com.renovavision.deezerplayer.inject.DaggerFragmentFactory;
import com.renovavision.deezerplayer.inject.ViewModelFactory;
import com.renovavision.deezerplayer.inject.ViewModelFactory_Factory;
import com.renovavision.deezerplayer.tracks.TopTracksFragment;
import com.renovavision.deezerplayer.tracks.TopTracksFragment_Factory;
import com.renovavision.deezerplayer.tracks.TopTracksViewModel;
import com.renovavision.deezerplayer.tracks.TopTracksViewModel_Factory;
import com.renovavision.player.PlayerFragment;
import com.renovavision.player.PlayerFragment_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.io.File;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import kotlin.Unit;
import kotlin.jvm.functions.Function1;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppInjector implements AppInjector {
  private Provider<MainActivityModule_MainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<File> cacheDirProvider;

  private Provider<String> apiUrlProvider;

  private Provider<Retrofit> provideRetrofit$dataProvider;

  private Provider<MusicApi> provideCocktailApiProvider;

  private Provider<HomeRepositoryImpl> homeRepositoryImplProvider;

  private Provider<ArtistRepositoryImpl> artistRepositoryImplProvider;

  private Provider<AlbumRepositoryImpl> albumRepositoryImplProvider;

  private DaggerAppInjector(Application application, String apiUrlParam, File cacheDirParam) {

    initialize(application, apiUrlParam, cacheDirParam);
  }

  public static AppInjector.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final Application application, final String apiUrlParam,
      final File cacheDirParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<MainActivityModule_MainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public MainActivityModule_MainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.cacheDirProvider = InstanceFactory.createNullable(cacheDirParam);
    this.apiUrlProvider = InstanceFactory.create(apiUrlParam);
    this.provideRetrofit$dataProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofit$dataFactory.create(cacheDirProvider, apiUrlProvider));
    this.provideCocktailApiProvider = NetworkModule_ProvideCocktailApiFactory.create(provideRetrofit$dataProvider);
    this.homeRepositoryImplProvider = DoubleCheck.provider(HomeRepositoryImpl_Factory.create(provideCocktailApiProvider));
    this.artistRepositoryImplProvider = DoubleCheck.provider(ArtistRepositoryImpl_Factory.create(provideCocktailApiProvider));
    this.albumRepositoryImplProvider = DoubleCheck.provider(AlbumRepositoryImpl_Factory.create(provideCocktailApiProvider));
  }

  @Override
  public void inject(App app) {
    injectApp(app);}

  private App injectApp(App instance) {
    App_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory implements AppInjector.Factory {
    @Override
    public AppInjector create(Application application, String apiUrl, File cacheDir) {
      Preconditions.checkNotNull(application);
      Preconditions.checkNotNull(apiUrl);
      return new DaggerAppInjector(application, apiUrl, cacheDir);
    }
  }

  private final class MainActivitySubcomponentFactory implements MainActivityModule_MainActivity.MainActivitySubcomponent.Factory {
    @Override
    public MainActivityModule_MainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements MainActivityModule_MainActivity.MainActivitySubcomponent {
    private Provider<GetHomeModel> getHomeModelProvider;

    private Provider<TopTracksViewModel> topTracksViewModelProvider;

    private Provider<TopArtistsViewModel> topArtistsViewModelProvider;

    private Provider<GetArtistModel> getArtistModelProvider;

    private Provider<ArtistViewModel> artistViewModelProvider;

    private Provider<GetAlbumInfo> getAlbumInfoProvider;

    private Provider<AlbumViewModel> albumViewModelProvider;

    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

    private Provider<ViewModelFactory> viewModelFactoryProvider;

    private Provider<MainActivity> arg0Provider;

    private Provider<Function1<ArtistEntity, Unit>> navTopTracksToArtistProvider;

    private Provider<Function1<PlayerModel, Unit>> navHomeToPlayerProvider;

    private Provider<TopTracksFragment> topTracksFragmentProvider;

    private Provider<Function1<ArtistEntity, Unit>> navTopArtistsToArtistProvider;

    private Provider<TopArtistsFragment> topArtistsFragmentProvider;

    private Provider<Function1<Integer, Unit>> navArtistToAlbumProvider;

    private Provider<Function1<PlayerModel, Unit>> navArtistToPlayerProvider;

    private Provider<ArtistFragment> artistFragmentProvider;

    private Provider<Function1<PlayerModel, Unit>> navAlbumToPlayerProvider;

    private Provider<AlbumFragment> albumFragmentProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0Param) {

      initialize(arg0Param);
    }

    private Map<Class<? extends Fragment>, Provider<Fragment>> getMapOfClassOfAndProviderOfFragment(
        ) {
      return MapBuilder.<Class<? extends Fragment>, Provider<Fragment>>newMapBuilder(6).put(NavHostFragment.class, NavigationModule_NavHostFragmentFactory.create()).put(TopTracksFragment.class, (Provider) topTracksFragmentProvider).put(TopArtistsFragment.class, (Provider) topArtistsFragmentProvider).put(ArtistFragment.class, (Provider) artistFragmentProvider).put(AlbumFragment.class, (Provider) albumFragmentProvider).put(PlayerFragment.class, (Provider) PlayerFragment_Factory.create()).build();}

    private DaggerFragmentFactory getDaggerFragmentFactory() {
      return new DaggerFragmentFactory(getMapOfClassOfAndProviderOfFragment());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0Param) {
      this.getHomeModelProvider = GetHomeModel_Factory.create((Provider) DaggerAppInjector.this.homeRepositoryImplProvider);
      this.topTracksViewModelProvider = TopTracksViewModel_Factory.create(getHomeModelProvider);
      this.topArtistsViewModelProvider = TopArtistsViewModel_Factory.create(getHomeModelProvider);
      this.getArtistModelProvider = GetArtistModel_Factory.create((Provider) DaggerAppInjector.this.artistRepositoryImplProvider);
      this.artistViewModelProvider = ArtistViewModel_Factory.create(getArtistModelProvider);
      this.getAlbumInfoProvider = GetAlbumInfo_Factory.create((Provider) DaggerAppInjector.this.albumRepositoryImplProvider);
      this.albumViewModelProvider = AlbumViewModel_Factory.create(getAlbumInfoProvider);
      this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(4).put(TopTracksViewModel.class, (Provider) topTracksViewModelProvider).put(TopArtistsViewModel.class, (Provider) topArtistsViewModelProvider).put(ArtistViewModel.class, (Provider) artistViewModelProvider).put(AlbumViewModel.class, (Provider) albumViewModelProvider).build();
      this.viewModelFactoryProvider = ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider);
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.navTopTracksToArtistProvider = NavigationModule_NavTopTracksToArtistFactory.create(arg0Provider);
      this.navHomeToPlayerProvider = NavigationModule_NavHomeToPlayerFactory.create(arg0Provider);
      this.topTracksFragmentProvider = TopTracksFragment_Factory.create((Provider) viewModelFactoryProvider, navTopTracksToArtistProvider, navHomeToPlayerProvider);
      this.navTopArtistsToArtistProvider = NavigationModule_NavTopArtistsToArtistFactory.create(arg0Provider);
      this.topArtistsFragmentProvider = TopArtistsFragment_Factory.create((Provider) viewModelFactoryProvider, navTopArtistsToArtistProvider);
      this.navArtistToAlbumProvider = NavigationModule_NavArtistToAlbumFactory.create(arg0Provider);
      this.navArtistToPlayerProvider = NavigationModule_NavArtistToPlayerFactory.create(arg0Provider);
      this.artistFragmentProvider = ArtistFragment_Factory.create((Provider) viewModelFactoryProvider, navArtistToAlbumProvider, navArtistToPlayerProvider);
      this.navAlbumToPlayerProvider = NavigationModule_NavAlbumToPlayerFactory.create(arg0Provider);
      this.albumFragmentProvider = AlbumFragment_Factory.create((Provider) viewModelFactoryProvider, navAlbumToPlayerProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDaggerFragmentFactory(instance, getDaggerFragmentFactory());
      return instance;
    }
  }
}
