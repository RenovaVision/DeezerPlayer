// Generated by Dagger (https://dagger.dev).
package com.renovavision.deezerplayer.artist.presentation.topartists;

import androidx.lifecycle.ViewModelProvider;
import com.renovavision.deezerplayer.domain.entities.ArtistEntity;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlin.Unit;
import kotlin.jvm.functions.Function1;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TopArtistsFragment_Factory implements Factory<TopArtistsFragment> {
  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  private final Provider<Function1<ArtistEntity, Unit>> navTopArtistsToArtistProvider;

  public TopArtistsFragment_Factory(Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<Function1<ArtistEntity, Unit>> navTopArtistsToArtistProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.navTopArtistsToArtistProvider = navTopArtistsToArtistProvider;
  }

  @Override
  public TopArtistsFragment get() {
    return newInstance(viewModelFactoryProvider.get(), navTopArtistsToArtistProvider.get());
  }

  public static TopArtistsFragment_Factory create(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<Function1<ArtistEntity, Unit>> navTopArtistsToArtistProvider) {
    return new TopArtistsFragment_Factory(viewModelFactoryProvider, navTopArtistsToArtistProvider);
  }

  public static TopArtistsFragment newInstance(ViewModelProvider.Factory viewModelFactory,
      Function1<ArtistEntity, Unit> navTopArtistsToArtist) {
    return new TopArtistsFragment(viewModelFactory, navTopArtistsToArtist);
  }
}
