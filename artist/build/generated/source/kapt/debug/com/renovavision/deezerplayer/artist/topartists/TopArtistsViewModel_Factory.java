// Generated by Dagger (https://dagger.dev).
package com.renovavision.deezerplayer.artist.topartists;

import com.renovavision.deezerplayer.artist.ArtistNavigator;
import com.renovavision.deezerplayer.domain.CoroutineDispatcherProvider;
import com.renovavision.deezerplayer.domain.usecases.GetTopArtists;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TopArtistsViewModel_Factory implements Factory<TopArtistsViewModel> {
  private final Provider<GetTopArtists> useCaseProvider;

  private final Provider<ArtistNavigator> artistNavigatorProvider;

  private final Provider<CoroutineDispatcherProvider> dispatcherProvider;

  public TopArtistsViewModel_Factory(Provider<GetTopArtists> useCaseProvider,
      Provider<ArtistNavigator> artistNavigatorProvider,
      Provider<CoroutineDispatcherProvider> dispatcherProvider) {
    this.useCaseProvider = useCaseProvider;
    this.artistNavigatorProvider = artistNavigatorProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public TopArtistsViewModel get() {
    return newInstance(useCaseProvider.get(), artistNavigatorProvider.get(), dispatcherProvider.get());
  }

  public static TopArtistsViewModel_Factory create(Provider<GetTopArtists> useCaseProvider,
      Provider<ArtistNavigator> artistNavigatorProvider,
      Provider<CoroutineDispatcherProvider> dispatcherProvider) {
    return new TopArtistsViewModel_Factory(useCaseProvider, artistNavigatorProvider, dispatcherProvider);
  }

  public static TopArtistsViewModel newInstance(GetTopArtists useCase,
      ArtistNavigator artistNavigator, CoroutineDispatcherProvider dispatcherProvider) {
    return new TopArtistsViewModel(useCase, artistNavigator, dispatcherProvider);
  }
}
