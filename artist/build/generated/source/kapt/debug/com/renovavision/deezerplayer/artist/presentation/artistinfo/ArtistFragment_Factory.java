// Generated by Dagger (https://dagger.dev).
package com.renovavision.deezerplayer.artist.presentation.artistinfo;

import androidx.lifecycle.ViewModelProvider;
import com.renovavision.deezerplayer.domain.entities.PlayerModel;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlin.Unit;
import kotlin.jvm.functions.Function1;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ArtistFragment_Factory implements Factory<ArtistFragment> {
  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  private final Provider<Function1<Integer, Unit>> navArtistToAlbumProvider;

  private final Provider<Function1<PlayerModel, Unit>> navArtistToPlayerProvider;

  public ArtistFragment_Factory(Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<Function1<Integer, Unit>> navArtistToAlbumProvider,
      Provider<Function1<PlayerModel, Unit>> navArtistToPlayerProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.navArtistToAlbumProvider = navArtistToAlbumProvider;
    this.navArtistToPlayerProvider = navArtistToPlayerProvider;
  }

  @Override
  public ArtistFragment get() {
    return newInstance(viewModelFactoryProvider.get(), navArtistToAlbumProvider.get(), navArtistToPlayerProvider.get());
  }

  public static ArtistFragment_Factory create(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<Function1<Integer, Unit>> navArtistToAlbumProvider,
      Provider<Function1<PlayerModel, Unit>> navArtistToPlayerProvider) {
    return new ArtistFragment_Factory(viewModelFactoryProvider, navArtistToAlbumProvider, navArtistToPlayerProvider);
  }

  public static ArtistFragment newInstance(ViewModelProvider.Factory viewModelFactory,
      Function1<Integer, Unit> navArtistToAlbum, Function1<PlayerModel, Unit> navArtistToPlayer) {
    return new ArtistFragment(viewModelFactory, navArtistToAlbum, navArtistToPlayer);
  }
}
