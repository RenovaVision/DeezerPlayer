// Generated by Dagger (https://dagger.dev).
package com.renovavision.deezerplayer.album;

import com.renovavision.deezerplayer.domain.CoroutineDispatcherProvider;
import com.renovavision.deezerplayer.domain.usecases.GetAlbumInfo;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AlbumViewModel_Factory implements Factory<AlbumViewModel> {
  private final Provider<GetAlbumInfo> useCaseProvider;

  private final Provider<AlbumNavigator> albumNavigatorProvider;

  private final Provider<CoroutineDispatcherProvider> providerProvider;

  public AlbumViewModel_Factory(Provider<GetAlbumInfo> useCaseProvider,
      Provider<AlbumNavigator> albumNavigatorProvider,
      Provider<CoroutineDispatcherProvider> providerProvider) {
    this.useCaseProvider = useCaseProvider;
    this.albumNavigatorProvider = albumNavigatorProvider;
    this.providerProvider = providerProvider;
  }

  @Override
  public AlbumViewModel get() {
    return newInstance(useCaseProvider.get(), albumNavigatorProvider.get(), providerProvider.get());
  }

  public static AlbumViewModel_Factory create(Provider<GetAlbumInfo> useCaseProvider,
      Provider<AlbumNavigator> albumNavigatorProvider,
      Provider<CoroutineDispatcherProvider> providerProvider) {
    return new AlbumViewModel_Factory(useCaseProvider, albumNavigatorProvider, providerProvider);
  }

  public static AlbumViewModel newInstance(GetAlbumInfo useCase, AlbumNavigator albumNavigator,
      CoroutineDispatcherProvider provider) {
    return new AlbumViewModel(useCase, albumNavigator, provider);
  }
}
